uses this as inspiration for more powerful language detection with google:

"""Language detection utilities for multilingual support."""

import re
from typing import Tuple, Dict, Optional
from google.cloud import translate_v2 as translate
from google.api_core import exceptions
import logging

logger = logging.getLogger(__name__)

# Language patterns for fast detection
LANGUAGE_PATTERNS = {
    'es': {
        'patterns': [
            r'\b(hola|estoy|tengo|problema|ayuda|ansiedad|pensamiento|sentimiento)\b',
            r'\b(me|mi|soy|es|la|el|un|una|que|para|por)\b'
        ],
        'name': 'español',
        'threshold': 3
    },
    'en': {
        'patterns': [
            r'\b(hello|hi|I|am|feeling|problem|help|anxiety|thought)\b',
            r'\b(the|is|are|my|have|with|about|for)\b'
        ],
        'name': 'English',
        'threshold': 3
    },
    'fr': {
        'patterns': [
            r'\b(bonjour|je|suis|problème|aide|anxiété|pensée)\b',
            r'\b(le|la|un|une|est|avec|pour|mon|ma)\b'
        ],
        'name': 'français',
        'threshold': 3
    },
    'de': {
        'patterns': [
            r'\b(hallo|ich|bin|problem|hilfe|angst|gedanke)\b',
            r'\b(der|die|das|ein|eine|ist|mit|für|mein)\b'
        ],
        'name': 'Deutsch',
        'threshold': 3
    },
    'it': {
        'patterns': [
            r'\b(ciao|sono|ho|problema|aiuto|ansia|pensiero)\b',
            r'\b(il|la|un|una|è|con|per|mio|mia)\b'
        ],
        'name': 'italiano',
        'threshold': 3
    },
    'pt': {
        'patterns': [
            r'\b(olá|oi|estou|tenho|problema|ajuda|ansiedade)\b',
            r'\b(o|a|um|uma|é|com|para|meu|minha)\b'
        ],
        'name': 'português',
        'threshold': 3
    },
    'ca': {
        'patterns': [
            r'\b(hola|estic|tinc|problema|ajuda|ansietat)\b',
            r'\b(el|la|un|una|és|amb|per|meu|meva)\b'
        ],
        'name': 'català',
        'threshold': 3
    }
}

# Exit command patterns by language
EXIT_PATTERNS = {
    'es': ['/salir', '/exit', '/terminar', '/fin'],
    'en': ['/exit', '/quit', '/done', '/end', '/stop'],
    'fr': ['/sortir', '/exit', '/terminer', '/fin'],
    'de': ['/beenden', '/exit', '/fertig', '/ende'],
    'it': ['/esci', '/uscire', '/exit', '/fine'],
    'pt': ['/sair', '/exit', '/terminar', '/fim'],
    'ca': ['/sortir', '/exit', '/acabar', '/fi'],
    '*': ['/exit', '/quit', '/done']  # Universal
}


def detect_language_pattern(text: str) -> Tuple[str, float]:
    """
    Detect language using pattern matching.
    Returns (language_code, confidence).
    """
    text_lower = text.lower()
    scores = {}
    
    for lang_code, config in LANGUAGE_PATTERNS.items():
        score = 0
        for pattern in config['patterns']:
            matches = len(re.findall(pattern, text_lower, re.IGNORECASE))
            score += matches
        
        if score >= config['threshold']:
            scores[lang_code] = score
    
    if scores:
        best_lang = max(scores.items(), key=lambda x: x[1])
        # Calculate confidence (0.5 to 1.0 based on match strength)
        confidence = min(0.5 + (best_lang[1] / 20), 1.0)
        return best_lang[0], confidence
    
    return 'es', 0.3  # Default to Spanish with low confidence


def detect_language_google(text: str) -> Tuple[str, float]:
    """
    Detect language using Google Cloud Translation API.
    Returns (language_code, confidence).
    """
    try:
        client = translate.Client()
        result = client.detect_language(text)
        
        logger.info(f"Google Translation API SUCCESS: Detected '{result['language']}' with confidence {result['confidence']}")
        return result['language'], result['confidence']
        
    except exceptions.GoogleAPIError as e:
        logger.error(f"Google API error: {e}")
        return detect_language_pattern(text)
    except Exception as e:
        logger.error(f"Unexpected error in language detection: {e}")
        return 'es', 0.0


def detect_language_with_fallback(text: str) -> Dict[str, any]:
    """
    Detect language with multi-tier fallback strategy.
    Returns dict with language_code, language_name, confidence, and method.
    """
    # Try pattern matching first (fast)
    lang_code, confidence = detect_language_pattern(text)
    
    if confidence >= 0.8:
        logger.info(f"Pattern matching SUCCESS: Detected '{lang_code}' with confidence {confidence}")
        return {
            'language_code': lang_code,
            'language_name': LANGUAGE_PATTERNS[lang_code]['name'],
            'confidence': confidence,
            'method': 'pattern'
        }

    # Pattern matching didn't have high confidence, trying Google API
    logger.info(f"Pattern matching had low confidence ({confidence}), trying Google Translation API...")
    
    # Use Google API for better accuracy
    try:
        lang_code, confidence = detect_language_google(text)
        
        # Get human-readable name
        if lang_code in LANGUAGE_PATTERNS:
            lang_name = LANGUAGE_PATTERNS[lang_code]['name']
        else:
            lang_name = lang_code.upper()
        
        return {
            'language_code': lang_code,
            'language_name': lang_name,
            'confidence': confidence,
            'method': 'google_api'
        }
    except Exception as e:
        logger.error(f"Failed to use Google API: {e}")
        # Final fallback
        return {
            'language_code': 'es',
            'language_name': 'español',
            'confidence': 0.3,
            'method': 'fallback'
        }


def check_exit_command(message: str, language: str) -> bool:
    """Check if message contains exit command in any supported format."""
    message_lower = message.lower().strip()
    
    # Check language-specific patterns
    if language in EXIT_PATTERNS:
        for pattern in EXIT_PATTERNS[language]:
            if pattern in message_lower:
                return True
    
    # Check universal patterns
    return any(pattern in message_lower for pattern in EXIT_PATTERNS['*'])

start integrating the agentic workflow with our frontend solution /Users/carlos/workspace/re-frame/frontend

pdf stored in GCS and assigned a self signed url good for 5 mins.

2. Add hability of send the messages in voice format, instedad of written. (user, the response is in text for now, unless is easy to try real time)

Make the pdf report have the initial transcription, the structured data obtained from it, allow the analyzer us both a summary of the fonversation plues the dtructured data, pfovide te results of the user, and the follow on conversation if any. Finally the analist could provide resources associated with the user case so it can keep learning

[project]
name = "reframe-agents"
version = "0.1.0"
description = "Reframe Agents"
readme = "README.md"
requires-python = ">=3.12"

# ───────────────────────── Runtime dependencies ───────────────────────── #
dependencies = [
    # Observability / OpenTelemetry
    "arize-otel>=0.8.2",
    "openinference-instrumentation==0.1.34",
    "openinference-instrumentation-google-adk>=0.1.0",
    "openinference-semantic-conventions==0.1.21",
    "opentelemetry-api==1.34.1",
    "opentelemetry-exporter-otlp==1.34.1",
    "opentelemetry-exporter-otlp-proto-common==1.34.1",
    "opentelemetry-exporter-otlp-proto-grpc==1.34.1",
    "opentelemetry-exporter-otlp-proto-http==1.34.1",
    "opentelemetry-proto==1.34.1",
    "opentelemetry-sdk==1.34.1",
    "opentelemetry-semantic-conventions==0.55b1",
    # Google ADK + helpers
    "google-adk>=1.5.0",
    "googleapis-common-protos==1.70.0",
    "grpcio==1.73.1",
    "protobuf==5.29.5",
    # Core app / backend
    "langfuse>=3.0.6",
    "supabase>=2.16.0",
    "requests==2.32.4",
    # Compatibility + typing
    "charset-normalizer==3.4.2",
    "certifi==2025.6.15",
    "idna==3.10",
    "importlib-metadata==8.7.0",
    "typing-extensions==4.14.0",
    "urllib3==2.5.0",
    "zipp==3.23.0",
    "poethepoet>=0.35.0",
    "black>=25.1.0",
    "ruff>=0.12.1",
    "mypy>=1.16.1",
    "psycopg2-binary>=2.9.10",
    "pytest>=8.4.1",
    "reportlab>=4.4.2",
    "pandas>=2.3.0",
    "tabulate>=0.9.0",
    "google-cloud-aiplatform[evaluation]>=1.100.0",
    "rouge-score>=0.1.2",
    "pytest-asyncio>=1.0.0",
]

# ─────────────── Optional groups (install with `uv pip install -e .[dev]`) ─────────────── #
[project.optional-dependencies]
dev = [
    # Test
    "pytest>=7.4.4",
    "pytest-asyncio>=0.23.0",
    "pytest-cov>=4.1.0",
    "pytest-watch>=4.2.0",
    "httpx>=0.26.0",

    # Code quality
    "black>=25.1.0",
    "ruff>=0.12.1",
    "mypy>=1.16.1",
    "mypy-extensions>=1.1.0",
    "pyright>=1.1.402",
    "pastel>=0.2.1",
    "coverage>=7.9.1",
    "poethepoet>=0.35.0",
    "pathspec>=0.12.1",
    "nodeenv>=1.9.1",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["reframe_agents", "app"]

# ────────────────────────────── Poe the Poet tasks ────────────────────────────── #
[tool.poe.tasks]
# Development
web = "adk web --artifact_service_uri=gs://re-frame"
cli = "adk run"
api = "adk api_server"

# Testing
test          = "pytest"
test-watch    = "pytest-watch"
test-cov      = "pytest --cov=. --cov-report=html --cov-report=term-missing"
test-unit     = "pytest tests/unit"
test-integration = "pytest tests/integration"

# Code Quality
lint         = "ruff check ."
lint-fix     = "ruff check . --fix"
format       = "black ."
format-check = "black . --check"
type-check   = "mypy ."

# Combined checks (what CI runs)
check = ["lint", "format-check", "type-check", "test-cov"]
fix   = ["lint-fix", "format"]

# Utilities
clean = """
find . -type d -name __pycache__ -exec rm -rf {} + 2>/dev/null || true
find . -type f -name '*.pyc' -delete
rm -rf .pytest_cache .mypy_cache .ruff_cache htmlcov .coverage
"""

# ─────────────────────────────── Ruff configuration ─────────────────────────────── #
[tool.ruff]
line-length = 100
target-version = "py312"

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "N",   # pep8-naming
    "UP",  # pyupgrade
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "DTZ", # flake8-datetimez
    "T20", # flake8-print
    "RET", # flake8-return
    "SIM", # flake8-simplify
    "RUF", # ruff-specific rules
]
ignore = ["E501","T201"]  # line too long (handled by Black)

[tool.ruff.lint.isort]
known-first-party = ["backend", "agents", "api", "config", "middleware"]
section-order = ["future", "standard-library", "third-party", "first-party", "local-folder"]
combine-as-imports = true
force-sort-within-sections = true

# ─────────────────────────────── Black configuration ─────────────────────────────── #
[tool.black]
line-length = 100
target-version = ['py312']

# ─────────────────────────────── MyPy configuration ─────────────────────────────── #
[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
plugins = ["pydantic.mypy"]
mypy_path = "$MYPY_CONFIG_FILE_DIR"
namespace_packages = true
explicit_package_bases = true

[[tool.mypy.overrides]]
module = [
    "firebase_admin.*",
    "google.adk.*",
    "langfuse",
    "langfuse.*",
    "reportlab.*",
]
ignore_missing_imports = true

# ─────────────────────────────── Pytest / Coverage ─────────────────────────────── #
[tool.pytest.ini_options]
testpaths        = ["tests"]
python_files     = "test_*.py"
python_functions = "test_*"

[tool.coverage.run]
omit = [
    "tests/*",
    "*/site-packages/*",
    "*/__pycache__/*",
]

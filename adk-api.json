{
    "openapi": "3.1.0",
    "info": {
        "title": "FastAPI",
        "version": "0.1.0"
    },
    "paths": {
        "/list-apps": {
            "get": {
                "summary": "List Apps",
                "operationId": "list_apps_list_apps_get",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "type": "string"
                                    },
                                    "type": "array",
                                    "title": "Response List Apps List Apps Get"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/debug/trace/{event_id}": {
            "get": {
                "summary": "Get Trace Dict",
                "operationId": "get_trace_dict_debug_trace__event_id__get",
                "parameters": [
                    {
                        "name": "event_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Event Id"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "title": "Response Get Trace Dict Debug Trace  Event Id  Get"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/debug/trace/session/{session_id}": {
            "get": {
                "summary": "Get Session Trace",
                "operationId": "get_session_trace_debug_trace_session__session_id__get",
                "parameters": [
                    {
                        "name": "session_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Session Id"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "title": "Response Get Session Trace Debug Trace Session  Session Id  Get"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/apps/{app_name}/users/{user_id}/sessions/{session_id}": {
            "get": {
                "summary": "Get Session",
                "operationId": "get_session_apps__app_name__users__user_id__sessions__session_id__get",
                "parameters": [
                    {
                        "name": "app_name",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "App Name"
                        }
                    },
                    {
                        "name": "user_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "User Id"
                        }
                    },
                    {
                        "name": "session_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Session Id"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Session"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Create Session With Id",
                "operationId": "create_session_with_id_apps__app_name__users__user_id__sessions__session_id__post",
                "parameters": [
                    {
                        "name": "app_name",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "App Name"
                        }
                    },
                    {
                        "name": "user_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "User Id"
                        }
                    },
                    {
                        "name": "session_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Session Id"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "anyOf": [
                                    {
                                        "type": "object",
                                        "additionalProperties": true
                                    },
                                    {
                                        "type": "null"
                                    }
                                ],
                                "title": "State"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Session"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "summary": "Delete Session",
                "operationId": "delete_session_apps__app_name__users__user_id__sessions__session_id__delete",
                "parameters": [
                    {
                        "name": "app_name",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "App Name"
                        }
                    },
                    {
                        "name": "user_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "User Id"
                        }
                    },
                    {
                        "name": "session_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Session Id"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/apps/{app_name}/users/{user_id}/sessions": {
            "get": {
                "summary": "List Sessions",
                "operationId": "list_sessions_apps__app_name__users__user_id__sessions_get",
                "parameters": [
                    {
                        "name": "app_name",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "App Name"
                        }
                    },
                    {
                        "name": "user_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "User Id"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Session"
                                    },
                                    "title": "Response List Sessions Apps  App Name  Users  User Id  Sessions Get"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Create Session",
                "operationId": "create_session_apps__app_name__users__user_id__sessions_post",
                "parameters": [
                    {
                        "name": "app_name",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "App Name"
                        }
                    },
                    {
                        "name": "user_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "User Id"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Body_create_session_apps__app_name__users__user_id__sessions_post"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Session"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/apps/{app_name}/eval_sets/{eval_set_id}": {
            "post": {
                "summary": "Create Eval Set",
                "description": "Creates an eval set, given the id.",
                "operationId": "create_eval_set_apps__app_name__eval_sets__eval_set_id__post",
                "parameters": [
                    {
                        "name": "app_name",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "App Name"
                        }
                    },
                    {
                        "name": "eval_set_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Eval Set Id"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/apps/{app_name}/eval_sets": {
            "get": {
                "summary": "List Eval Sets",
                "description": "Lists all eval sets for the given app.",
                "operationId": "list_eval_sets_apps__app_name__eval_sets_get",
                "parameters": [
                    {
                        "name": "app_name",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "App Name"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    },
                                    "title": "Response List Eval Sets Apps  App Name  Eval Sets Get"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/apps/{app_name}/eval_sets/{eval_set_id}/add_session": {
            "post": {
                "summary": "Add Session To Eval Set",
                "operationId": "add_session_to_eval_set_apps__app_name__eval_sets__eval_set_id__add_session_post",
                "parameters": [
                    {
                        "name": "app_name",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "App Name"
                        }
                    },
                    {
                        "name": "eval_set_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Eval Set Id"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AddSessionToEvalSetRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/apps/{app_name}/eval_sets/{eval_set_id}/evals": {
            "get": {
                "summary": "List Evals In Eval Set",
                "description": "Lists all evals in an eval set.",
                "operationId": "list_evals_in_eval_set_apps__app_name__eval_sets__eval_set_id__evals_get",
                "parameters": [
                    {
                        "name": "app_name",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "App Name"
                        }
                    },
                    {
                        "name": "eval_set_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Eval Set Id"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    },
                                    "title": "Response List Evals In Eval Set Apps  App Name  Eval Sets  Eval Set Id  Evals Get"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/apps/{app_name}/eval_sets/{eval_set_id}/evals/{eval_case_id}": {
            "get": {
                "summary": "Get Eval",
                "description": "Gets an eval case in an eval set.",
                "operationId": "get_eval_apps__app_name__eval_sets__eval_set_id__evals__eval_case_id__get",
                "parameters": [
                    {
                        "name": "app_name",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "App Name"
                        }
                    },
                    {
                        "name": "eval_set_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Eval Set Id"
                        }
                    },
                    {
                        "name": "eval_case_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Eval Case Id"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EvalCase-Output"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "summary": "Update Eval",
                "operationId": "update_eval_apps__app_name__eval_sets__eval_set_id__evals__eval_case_id__put",
                "parameters": [
                    {
                        "name": "app_name",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "App Name"
                        }
                    },
                    {
                        "name": "eval_set_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Eval Set Id"
                        }
                    },
                    {
                        "name": "eval_case_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Eval Case Id"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/EvalCase-Input"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "summary": "Delete Eval",
                "operationId": "delete_eval_apps__app_name__eval_sets__eval_set_id__evals__eval_case_id__delete",
                "parameters": [
                    {
                        "name": "app_name",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "App Name"
                        }
                    },
                    {
                        "name": "eval_set_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Eval Set Id"
                        }
                    },
                    {
                        "name": "eval_case_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Eval Case Id"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/apps/{app_name}/eval_sets/{eval_set_id}/run_eval": {
            "post": {
                "summary": "Run Eval",
                "description": "Runs an eval given the details in the eval request.",
                "operationId": "run_eval_apps__app_name__eval_sets__eval_set_id__run_eval_post",
                "parameters": [
                    {
                        "name": "app_name",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "App Name"
                        }
                    },
                    {
                        "name": "eval_set_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Eval Set Id"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RunEvalRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/RunEvalResult"
                                    },
                                    "title": "Response Run Eval Apps  App Name  Eval Sets  Eval Set Id  Run Eval Post"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/apps/{app_name}/eval_results/{eval_result_id}": {
            "get": {
                "summary": "Get Eval Result",
                "description": "Gets the eval result for the given eval id.",
                "operationId": "get_eval_result_apps__app_name__eval_results__eval_result_id__get",
                "parameters": [
                    {
                        "name": "app_name",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "App Name"
                        }
                    },
                    {
                        "name": "eval_result_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Eval Result Id"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EvalSetResult"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/apps/{app_name}/eval_results": {
            "get": {
                "summary": "List Eval Results",
                "description": "Lists all eval results for the given app.",
                "operationId": "list_eval_results_apps__app_name__eval_results_get",
                "parameters": [
                    {
                        "name": "app_name",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "App Name"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    },
                                    "title": "Response List Eval Results Apps  App Name  Eval Results Get"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/apps/{app_name}/users/{user_id}/sessions/{session_id}/artifacts/{artifact_name}": {
            "get": {
                "summary": "Load Artifact",
                "operationId": "load_artifact_apps__app_name__users__user_id__sessions__session_id__artifacts__artifact_name__get",
                "parameters": [
                    {
                        "name": "app_name",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "App Name"
                        }
                    },
                    {
                        "name": "user_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "User Id"
                        }
                    },
                    {
                        "name": "session_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Session Id"
                        }
                    },
                    {
                        "name": "artifact_name",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Artifact Name"
                        }
                    },
                    {
                        "name": "version",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "integer"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "title": "Version"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "anyOf": [
                                        {
                                            "$ref": "#/components/schemas/Part-Output"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "title": "Response Load Artifact Apps  App Name  Users  User Id  Sessions  Session Id  Artifacts  Artifact Name  Get"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "summary": "Delete Artifact",
                "operationId": "delete_artifact_apps__app_name__users__user_id__sessions__session_id__artifacts__artifact_name__delete",
                "parameters": [
                    {
                        "name": "app_name",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "App Name"
                        }
                    },
                    {
                        "name": "user_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "User Id"
                        }
                    },
                    {
                        "name": "session_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Session Id"
                        }
                    },
                    {
                        "name": "artifact_name",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Artifact Name"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/apps/{app_name}/users/{user_id}/sessions/{session_id}/artifacts/{artifact_name}/versions/{version_id}": {
            "get": {
                "summary": "Load Artifact Version",
                "operationId": "load_artifact_version_apps__app_name__users__user_id__sessions__session_id__artifacts__artifact_name__versions__version_id__get",
                "parameters": [
                    {
                        "name": "app_name",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "App Name"
                        }
                    },
                    {
                        "name": "user_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "User Id"
                        }
                    },
                    {
                        "name": "session_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Session Id"
                        }
                    },
                    {
                        "name": "artifact_name",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Artifact Name"
                        }
                    },
                    {
                        "name": "version_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "title": "Version Id"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "anyOf": [
                                        {
                                            "$ref": "#/components/schemas/Part-Output"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "title": "Response Load Artifact Version Apps  App Name  Users  User Id  Sessions  Session Id  Artifacts  Artifact Name  Versions  Version Id  Get"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/apps/{app_name}/users/{user_id}/sessions/{session_id}/artifacts": {
            "get": {
                "summary": "List Artifact Names",
                "operationId": "list_artifact_names_apps__app_name__users__user_id__sessions__session_id__artifacts_get",
                "parameters": [
                    {
                        "name": "app_name",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "App Name"
                        }
                    },
                    {
                        "name": "user_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "User Id"
                        }
                    },
                    {
                        "name": "session_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Session Id"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    },
                                    "title": "Response List Artifact Names Apps  App Name  Users  User Id  Sessions  Session Id  Artifacts Get"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/apps/{app_name}/users/{user_id}/sessions/{session_id}/artifacts/{artifact_name}/versions": {
            "get": {
                "summary": "List Artifact Versions",
                "operationId": "list_artifact_versions_apps__app_name__users__user_id__sessions__session_id__artifacts__artifact_name__versions_get",
                "parameters": [
                    {
                        "name": "app_name",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "App Name"
                        }
                    },
                    {
                        "name": "user_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "User Id"
                        }
                    },
                    {
                        "name": "session_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Session Id"
                        }
                    },
                    {
                        "name": "artifact_name",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Artifact Name"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "integer"
                                    },
                                    "title": "Response List Artifact Versions Apps  App Name  Users  User Id  Sessions  Session Id  Artifacts  Artifact Name  Versions Get"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/run": {
            "post": {
                "summary": "Agent Run",
                "operationId": "agent_run_run_post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AgentRunRequest"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Event-Output"
                                    },
                                    "type": "array",
                                    "title": "Response Agent Run Run Post"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/run_sse": {
            "post": {
                "summary": "Agent Run Sse",
                "operationId": "agent_run_sse_run_sse_post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AgentRunRequest"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/apps/{app_name}/users/{user_id}/sessions/{session_id}/events/{event_id}/graph": {
            "get": {
                "summary": "Get Event Graph",
                "operationId": "get_event_graph_apps__app_name__users__user_id__sessions__session_id__events__event_id__graph_get",
                "parameters": [
                    {
                        "name": "app_name",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "App Name"
                        }
                    },
                    {
                        "name": "user_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "User Id"
                        }
                    },
                    {
                        "name": "session_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Session Id"
                        }
                    },
                    {
                        "name": "event_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Event Id"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    "components": {
        "schemas": {
            "APIKey": {
                "properties": {
                    "type": {
                        "$ref": "#/components/schemas/SecuritySchemeType",
                        "default": "apiKey"
                    },
                    "description": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Description"
                    },
                    "in": {
                        "$ref": "#/components/schemas/APIKeyIn"
                    },
                    "name": {
                        "type": "string",
                        "title": "Name"
                    }
                },
                "additionalProperties": true,
                "type": "object",
                "required": [
                    "in",
                    "name"
                ],
                "title": "APIKey"
            },
            "APIKeyIn": {
                "type": "string",
                "enum": [
                    "query",
                    "header",
                    "cookie"
                ],
                "title": "APIKeyIn"
            },
            "AddSessionToEvalSetRequest": {
                "properties": {
                    "evalId": {
                        "type": "string",
                        "title": "Evalid"
                    },
                    "sessionId": {
                        "type": "string",
                        "title": "Sessionid"
                    },
                    "userId": {
                        "type": "string",
                        "title": "Userid"
                    }
                },
                "type": "object",
                "required": [
                    "evalId",
                    "sessionId",
                    "userId"
                ],
                "title": "AddSessionToEvalSetRequest"
            },
            "AgentRunRequest": {
                "properties": {
                    "appName": {
                        "type": "string",
                        "title": "Appname"
                    },
                    "userId": {
                        "type": "string",
                        "title": "Userid"
                    },
                    "sessionId": {
                        "type": "string",
                        "title": "Sessionid"
                    },
                    "newMessage": {
                        "$ref": "#/components/schemas/Content-Input"
                    },
                    "streaming": {
                        "type": "boolean",
                        "title": "Streaming",
                        "default": false
                    }
                },
                "type": "object",
                "required": [
                    "appName",
                    "userId",
                    "sessionId",
                    "newMessage"
                ],
                "title": "AgentRunRequest"
            },
            "AuthConfig-Input": {
                "properties": {
                    "authScheme": {
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/APIKey"
                            },
                            {
                                "$ref": "#/components/schemas/HTTPBase"
                            },
                            {
                                "$ref": "#/components/schemas/OAuth2-Input"
                            },
                            {
                                "$ref": "#/components/schemas/OpenIdConnect"
                            },
                            {
                                "$ref": "#/components/schemas/HTTPBearer"
                            },
                            {
                                "$ref": "#/components/schemas/OpenIdConnectWithConfig"
                            }
                        ],
                        "title": "Authscheme"
                    },
                    "rawAuthCredential": {
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/AuthCredential-Input"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    },
                    "exchangedAuthCredential": {
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/AuthCredential-Input"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    },
                    "credentialKey": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Credentialkey"
                    }
                },
                "additionalProperties": true,
                "type": "object",
                "required": [
                    "authScheme"
                ],
                "title": "AuthConfig",
                "description": "The auth config sent by tool asking client to collect auth credentials and\n\nadk and client will help to fill in the response"
            },
            "AuthConfig-Output": {
                "properties": {
                    "authScheme": {
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/APIKey"
                            },
                            {
                                "$ref": "#/components/schemas/HTTPBase"
                            },
                            {
                                "$ref": "#/components/schemas/OAuth2-Output"
                            },
                            {
                                "$ref": "#/components/schemas/OpenIdConnect"
                            },
                            {
                                "$ref": "#/components/schemas/HTTPBearer"
                            },
                            {
                                "$ref": "#/components/schemas/OpenIdConnectWithConfig"
                            }
                        ],
                        "title": "Authscheme"
                    },
                    "rawAuthCredential": {
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/AuthCredential-Output"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    },
                    "exchangedAuthCredential": {
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/AuthCredential-Output"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    },
                    "credentialKey": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Credentialkey"
                    }
                },
                "additionalProperties": true,
                "type": "object",
                "required": [
                    "authScheme"
                ],
                "title": "AuthConfig",
                "description": "The auth config sent by tool asking client to collect auth credentials and\n\nadk and client will help to fill in the response"
            },
            "AuthCredential-Input": {
                "properties": {
                    "authType": {
                        "$ref": "#/components/schemas/AuthCredentialTypes"
                    },
                    "resourceRef": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Resourceref"
                    },
                    "apiKey": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Apikey"
                    },
                    "http": {
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/HttpAuth"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    },
                    "serviceAccount": {
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/ServiceAccount"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    },
                    "oauth2": {
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/OAuth2Auth"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    }
                },
                "additionalProperties": true,
                "type": "object",
                "required": [
                    "authType"
                ],
                "title": "AuthCredential",
                "description": "Data class representing an authentication credential.\n\nTo exchange for the actual credential, please use\nCredentialExchanger.exchange_credential().\n\nExamples: API Key Auth\nAuthCredential(\n    auth_type=AuthCredentialTypes.API_KEY,\n    api_key=\"1234\",\n)\n\nExample: HTTP Auth\nAuthCredential(\n    auth_type=AuthCredentialTypes.HTTP,\n    http=HttpAuth(\n        scheme=\"basic\",\n        credentials=HttpCredentials(username=\"user\", password=\"password\"),\n    ),\n)\n\nExample: OAuth2 Bearer Token in HTTP Header\nAuthCredential(\n    auth_type=AuthCredentialTypes.HTTP,\n    http=HttpAuth(\n        scheme=\"bearer\",\n        credentials=HttpCredentials(token=\"eyAkaknabna....\"),\n    ),\n)\n\nExample: OAuth2 Auth with Authorization Code Flow\nAuthCredential(\n    auth_type=AuthCredentialTypes.OAUTH2,\n    oauth2=OAuth2Auth(\n        client_id=\"1234\",\n        client_secret=\"secret\",\n    ),\n)\n\nExample: OpenID Connect Auth\nAuthCredential(\n    auth_type=AuthCredentialTypes.OPEN_ID_CONNECT,\n    oauth2=OAuth2Auth(\n        client_id=\"1234\",\n        client_secret=\"secret\",\n        redirect_uri=\"https://example.com\",\n        scopes=[\"scope1\", \"scope2\"],\n    ),\n)\n\nExample: Auth with resource reference\nAuthCredential(\n    auth_type=AuthCredentialTypes.API_KEY,\n    resource_ref=\"projects/1234/locations/us-central1/resources/resource1\",\n)"
            },
            "AuthCredential-Output": {
                "properties": {
                    "authType": {
                        "$ref": "#/components/schemas/AuthCredentialTypes"
                    },
                    "resourceRef": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Resourceref"
                    },
                    "apiKey": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Apikey"
                    },
                    "http": {
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/HttpAuth"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    },
                    "serviceAccount": {
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/ServiceAccount"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    },
                    "oauth2": {
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/OAuth2Auth"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    }
                },
                "additionalProperties": true,
                "type": "object",
                "required": [
                    "authType"
                ],
                "title": "AuthCredential",
                "description": "Data class representing an authentication credential.\n\nTo exchange for the actual credential, please use\nCredentialExchanger.exchange_credential().\n\nExamples: API Key Auth\nAuthCredential(\n    auth_type=AuthCredentialTypes.API_KEY,\n    api_key=\"1234\",\n)\n\nExample: HTTP Auth\nAuthCredential(\n    auth_type=AuthCredentialTypes.HTTP,\n    http=HttpAuth(\n        scheme=\"basic\",\n        credentials=HttpCredentials(username=\"user\", password=\"password\"),\n    ),\n)\n\nExample: OAuth2 Bearer Token in HTTP Header\nAuthCredential(\n    auth_type=AuthCredentialTypes.HTTP,\n    http=HttpAuth(\n        scheme=\"bearer\",\n        credentials=HttpCredentials(token=\"eyAkaknabna....\"),\n    ),\n)\n\nExample: OAuth2 Auth with Authorization Code Flow\nAuthCredential(\n    auth_type=AuthCredentialTypes.OAUTH2,\n    oauth2=OAuth2Auth(\n        client_id=\"1234\",\n        client_secret=\"secret\",\n    ),\n)\n\nExample: OpenID Connect Auth\nAuthCredential(\n    auth_type=AuthCredentialTypes.OPEN_ID_CONNECT,\n    oauth2=OAuth2Auth(\n        client_id=\"1234\",\n        client_secret=\"secret\",\n        redirect_uri=\"https://example.com\",\n        scopes=[\"scope1\", \"scope2\"],\n    ),\n)\n\nExample: Auth with resource reference\nAuthCredential(\n    auth_type=AuthCredentialTypes.API_KEY,\n    resource_ref=\"projects/1234/locations/us-central1/resources/resource1\",\n)"
            },
            "AuthCredentialTypes": {
                "type": "string",
                "enum": [
                    "apiKey",
                    "http",
                    "oauth2",
                    "openIdConnect",
                    "serviceAccount"
                ],
                "title": "AuthCredentialTypes",
                "description": "Represents the type of authentication credential."
            },
            "Blob": {
                "properties": {
                    "displayName": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Displayname",
                        "description": "Optional. Display name of the blob. Used to provide a label or filename to distinguish blobs. This field is not currently used in the Gemini GenerateContent calls."
                    },
                    "data": {
                        "anyOf": [
                            {
                                "type": "string",
                                "format": "base64url"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Data",
                        "description": "Required. Raw bytes."
                    },
                    "mimeType": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Mimetype",
                        "description": "Required. The IANA standard MIME type of the source data."
                    }
                },
                "additionalProperties": false,
                "type": "object",
                "title": "Blob",
                "description": "Content blob."
            },
            "Body_create_session_apps__app_name__users__user_id__sessions_post": {
                "properties": {
                    "state": {
                        "anyOf": [
                            {
                                "additionalProperties": true,
                                "type": "object"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "State"
                    },
                    "events": {
                        "anyOf": [
                            {
                                "items": {
                                    "$ref": "#/components/schemas/Event-Input"
                                },
                                "type": "array"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Events"
                    }
                },
                "type": "object",
                "title": "Body_create_session_apps__app_name__users__user_id__sessions_post"
            },
            "CodeExecutionResult": {
                "properties": {
                    "outcome": {
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/Outcome"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "description": "Required. Outcome of the code execution."
                    },
                    "output": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Output",
                        "description": "Optional. Contains stdout when code execution is successful, stderr or other description otherwise."
                    }
                },
                "additionalProperties": false,
                "type": "object",
                "title": "CodeExecutionResult",
                "description": "Result of executing the [ExecutableCode].\n\nAlways follows a `part` containing the [ExecutableCode]."
            },
            "Content-Input": {
                "properties": {
                    "parts": {
                        "anyOf": [
                            {
                                "items": {
                                    "$ref": "#/components/schemas/Part-Input"
                                },
                                "type": "array"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Parts",
                        "description": "List of parts that constitute a single message. Each part may have\n      a different IANA MIME type."
                    },
                    "role": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Role",
                        "description": "Optional. The producer of the content. Must be either 'user' or\n      'model'. Useful to set for multi-turn conversations, otherwise can be\n      empty. If role is not specified, SDK will determine the role."
                    }
                },
                "additionalProperties": false,
                "type": "object",
                "title": "Content",
                "description": "Contains the multi-part content of a message."
            },
            "Content-Output": {
                "properties": {
                    "parts": {
                        "anyOf": [
                            {
                                "items": {
                                    "$ref": "#/components/schemas/Part-Output"
                                },
                                "type": "array"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Parts",
                        "description": "List of parts that constitute a single message. Each part may have\n      a different IANA MIME type."
                    },
                    "role": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Role",
                        "description": "Optional. The producer of the content. Must be either 'user' or\n      'model'. Useful to set for multi-turn conversations, otherwise can be\n      empty. If role is not specified, SDK will determine the role."
                    }
                },
                "additionalProperties": false,
                "type": "object",
                "title": "Content",
                "description": "Contains the multi-part content of a message."
            },
            "EvalCase-Input": {
                "properties": {
                    "evalId": {
                        "type": "string",
                        "title": "Evalid"
                    },
                    "conversation": {
                        "items": {
                            "$ref": "#/components/schemas/Invocation-Input"
                        },
                        "type": "array",
                        "title": "Conversation"
                    },
                    "sessionInput": {
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/SessionInput"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    },
                    "creationTimestamp": {
                        "type": "number",
                        "title": "Creationtimestamp",
                        "default": 0.0
                    }
                },
                "type": "object",
                "required": [
                    "evalId",
                    "conversation"
                ],
                "title": "EvalCase",
                "description": "An eval case."
            },
            "EvalCase-Output": {
                "properties": {
                    "evalId": {
                        "type": "string",
                        "title": "Evalid"
                    },
                    "conversation": {
                        "items": {
                            "$ref": "#/components/schemas/Invocation-Output"
                        },
                        "type": "array",
                        "title": "Conversation"
                    },
                    "sessionInput": {
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/SessionInput"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    },
                    "creationTimestamp": {
                        "type": "number",
                        "title": "Creationtimestamp",
                        "default": 0.0
                    }
                },
                "type": "object",
                "required": [
                    "evalId",
                    "conversation"
                ],
                "title": "EvalCase",
                "description": "An eval case."
            },
            "EvalCaseResult": {
                "properties": {
                    "evalSetFile": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Evalsetfile",
                        "description": "This field is deprecated, use eval_set_id instead.",
                        "deprecated": true
                    },
                    "evalSetId": {
                        "type": "string",
                        "title": "Evalsetid",
                        "default": ""
                    },
                    "evalId": {
                        "type": "string",
                        "title": "Evalid",
                        "default": ""
                    },
                    "finalEvalStatus": {
                        "$ref": "#/components/schemas/EvalStatus"
                    },
                    "evalMetricResults": {
                        "anyOf": [
                            {
                                "items": {
                                    "prefixItems": [
                                        {
                                            "$ref": "#/components/schemas/EvalMetric"
                                        },
                                        {
                                            "$ref": "#/components/schemas/EvalMetricResult"
                                        }
                                    ],
                                    "type": "array",
                                    "maxItems": 2,
                                    "minItems": 2
                                },
                                "type": "array"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Evalmetricresults",
                        "description": "This field is deprecated, use overall_eval_metric_results instead.",
                        "deprecated": true
                    },
                    "overallEvalMetricResults": {
                        "items": {
                            "$ref": "#/components/schemas/EvalMetricResult"
                        },
                        "type": "array",
                        "title": "Overallevalmetricresults"
                    },
                    "evalMetricResultPerInvocation": {
                        "items": {
                            "$ref": "#/components/schemas/EvalMetricResultPerInvocation"
                        },
                        "type": "array",
                        "title": "Evalmetricresultperinvocation"
                    },
                    "sessionId": {
                        "type": "string",
                        "title": "Sessionid"
                    },
                    "sessionDetails": {
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/Session"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    },
                    "userId": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Userid"
                    }
                },
                "type": "object",
                "required": [
                    "finalEvalStatus",
                    "overallEvalMetricResults",
                    "evalMetricResultPerInvocation",
                    "sessionId"
                ],
                "title": "EvalCaseResult",
                "description": "Case level evaluation results."
            },
            "EvalMetric": {
                "properties": {
                    "metricName": {
                        "type": "string",
                        "title": "Metricname"
                    },
                    "threshold": {
                        "type": "number",
                        "title": "Threshold"
                    }
                },
                "type": "object",
                "required": [
                    "metricName",
                    "threshold"
                ],
                "title": "EvalMetric",
                "description": "A metric used to evaluate a particular aspect of an eval case."
            },
            "EvalMetricResult": {
                "properties": {
                    "metricName": {
                        "type": "string",
                        "title": "Metricname"
                    },
                    "threshold": {
                        "type": "number",
                        "title": "Threshold"
                    },
                    "score": {
                        "anyOf": [
                            {
                                "type": "number"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Score"
                    },
                    "evalStatus": {
                        "$ref": "#/components/schemas/EvalStatus"
                    }
                },
                "type": "object",
                "required": [
                    "metricName",
                    "threshold",
                    "evalStatus"
                ],
                "title": "EvalMetricResult",
                "description": "The actual computed score/value of a particular EvalMetric."
            },
            "EvalMetricResultPerInvocation": {
                "properties": {
                    "actualInvocation": {
                        "$ref": "#/components/schemas/Invocation-Output"
                    },
                    "expectedInvocation": {
                        "$ref": "#/components/schemas/Invocation-Output"
                    },
                    "evalMetricResults": {
                        "items": {
                            "$ref": "#/components/schemas/EvalMetricResult"
                        },
                        "type": "array",
                        "title": "Evalmetricresults",
                        "default": []
                    }
                },
                "type": "object",
                "required": [
                    "actualInvocation",
                    "expectedInvocation"
                ],
                "title": "EvalMetricResultPerInvocation",
                "description": "Eval metric results per invocation."
            },
            "EvalSetResult": {
                "properties": {
                    "evalSetResultId": {
                        "type": "string",
                        "title": "Evalsetresultid"
                    },
                    "evalSetResultName": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Evalsetresultname"
                    },
                    "evalSetId": {
                        "type": "string",
                        "title": "Evalsetid"
                    },
                    "evalCaseResults": {
                        "items": {
                            "$ref": "#/components/schemas/EvalCaseResult"
                        },
                        "type": "array",
                        "title": "Evalcaseresults"
                    },
                    "creationTimestamp": {
                        "type": "number",
                        "title": "Creationtimestamp",
                        "default": 0.0
                    }
                },
                "type": "object",
                "required": [
                    "evalSetResultId",
                    "evalSetId"
                ],
                "title": "EvalSetResult",
                "description": "Eval set level evaluation results."
            },
            "EvalStatus": {
                "type": "integer",
                "enum": [
                    1,
                    2,
                    3
                ],
                "title": "EvalStatus"
            },
            "Event-Input": {
                "properties": {
                    "content": {
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/Content-Input"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    },
                    "groundingMetadata": {
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/GroundingMetadata-Input"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    },
                    "partial": {
                        "anyOf": [
                            {
                                "type": "boolean"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Partial"
                    },
                    "turnComplete": {
                        "anyOf": [
                            {
                                "type": "boolean"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Turncomplete"
                    },
                    "errorCode": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Errorcode"
                    },
                    "errorMessage": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Errormessage"
                    },
                    "interrupted": {
                        "anyOf": [
                            {
                                "type": "boolean"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Interrupted"
                    },
                    "customMetadata": {
                        "anyOf": [
                            {
                                "additionalProperties": true,
                                "type": "object"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Custommetadata"
                    },
                    "usageMetadata": {
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/GenerateContentResponseUsageMetadata-Input"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    },
                    "invocationId": {
                        "type": "string",
                        "title": "Invocationid",
                        "default": ""
                    },
                    "author": {
                        "type": "string",
                        "title": "Author"
                    },
                    "actions": {
                        "$ref": "#/components/schemas/EventActions-Input"
                    },
                    "longRunningToolIds": {
                        "anyOf": [
                            {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array",
                                "uniqueItems": true
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Longrunningtoolids"
                    },
                    "branch": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Branch"
                    },
                    "id": {
                        "type": "string",
                        "title": "Id",
                        "default": ""
                    },
                    "timestamp": {
                        "type": "number",
                        "title": "Timestamp"
                    }
                },
                "additionalProperties": false,
                "type": "object",
                "required": [
                    "author"
                ],
                "title": "Event",
                "description": "Represents an event in a conversation between agents and users.\n\nIt is used to store the content of the conversation, as well as the actions\ntaken by the agents like function calls, etc.\n\nAttributes:\n  invocation_id: Required. The invocation ID of the event. Should be non-empty\n    before appending to a session.\n  author: Required. \"user\" or the name of the agent, indicating who appended\n    the event to the session.\n  actions: The actions taken by the agent.\n  long_running_tool_ids: The ids of the long running function calls.\n  branch: The branch of the event.\n  id: The unique identifier of the event.\n  timestamp: The timestamp of the event.\n  is_final_response: Whether the event is the final response of the agent.\n  get_function_calls: Returns the function calls in the event."
            },
            "Event-Output": {
                "properties": {
                    "content": {
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/Content-Output"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    },
                    "groundingMetadata": {
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/GroundingMetadata-Output"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    },
                    "partial": {
                        "anyOf": [
                            {
                                "type": "boolean"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Partial"
                    },
                    "turnComplete": {
                        "anyOf": [
                            {
                                "type": "boolean"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Turncomplete"
                    },
                    "errorCode": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Errorcode"
                    },
                    "errorMessage": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Errormessage"
                    },
                    "interrupted": {
                        "anyOf": [
                            {
                                "type": "boolean"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Interrupted"
                    },
                    "customMetadata": {
                        "anyOf": [
                            {
                                "additionalProperties": true,
                                "type": "object"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Custommetadata"
                    },
                    "usageMetadata": {
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/GenerateContentResponseUsageMetadata-Output"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    },
                    "invocationId": {
                        "type": "string",
                        "title": "Invocationid",
                        "default": ""
                    },
                    "author": {
                        "type": "string",
                        "title": "Author"
                    },
                    "actions": {
                        "$ref": "#/components/schemas/EventActions-Output"
                    },
                    "longRunningToolIds": {
                        "anyOf": [
                            {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array",
                                "uniqueItems": true
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Longrunningtoolids"
                    },
                    "branch": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Branch"
                    },
                    "id": {
                        "type": "string",
                        "title": "Id",
                        "default": ""
                    },
                    "timestamp": {
                        "type": "number",
                        "title": "Timestamp"
                    }
                },
                "additionalProperties": false,
                "type": "object",
                "required": [
                    "author"
                ],
                "title": "Event",
                "description": "Represents an event in a conversation between agents and users.\n\nIt is used to store the content of the conversation, as well as the actions\ntaken by the agents like function calls, etc.\n\nAttributes:\n  invocation_id: Required. The invocation ID of the event. Should be non-empty\n    before appending to a session.\n  author: Required. \"user\" or the name of the agent, indicating who appended\n    the event to the session.\n  actions: The actions taken by the agent.\n  long_running_tool_ids: The ids of the long running function calls.\n  branch: The branch of the event.\n  id: The unique identifier of the event.\n  timestamp: The timestamp of the event.\n  is_final_response: Whether the event is the final response of the agent.\n  get_function_calls: Returns the function calls in the event."
            },
            "EventActions-Input": {
                "properties": {
                    "skipSummarization": {
                        "anyOf": [
                            {
                                "type": "boolean"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Skipsummarization"
                    },
                    "stateDelta": {
                        "additionalProperties": true,
                        "type": "object",
                        "title": "Statedelta"
                    },
                    "artifactDelta": {
                        "additionalProperties": {
                            "type": "integer"
                        },
                        "type": "object",
                        "title": "Artifactdelta"
                    },
                    "transferToAgent": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Transfertoagent"
                    },
                    "escalate": {
                        "anyOf": [
                            {
                                "type": "boolean"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Escalate"
                    },
                    "requestedAuthConfigs": {
                        "additionalProperties": {
                            "$ref": "#/components/schemas/AuthConfig-Input"
                        },
                        "type": "object",
                        "title": "Requestedauthconfigs"
                    }
                },
                "additionalProperties": false,
                "type": "object",
                "title": "EventActions",
                "description": "Represents the actions attached to an event."
            },
            "EventActions-Output": {
                "properties": {
                    "skipSummarization": {
                        "anyOf": [
                            {
                                "type": "boolean"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Skipsummarization"
                    },
                    "stateDelta": {
                        "additionalProperties": true,
                        "type": "object",
                        "title": "Statedelta"
                    },
                    "artifactDelta": {
                        "additionalProperties": {
                            "type": "integer"
                        },
                        "type": "object",
                        "title": "Artifactdelta"
                    },
                    "transferToAgent": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Transfertoagent"
                    },
                    "escalate": {
                        "anyOf": [
                            {
                                "type": "boolean"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Escalate"
                    },
                    "requestedAuthConfigs": {
                        "additionalProperties": {
                            "$ref": "#/components/schemas/AuthConfig-Output"
                        },
                        "type": "object",
                        "title": "Requestedauthconfigs"
                    }
                },
                "additionalProperties": false,
                "type": "object",
                "title": "EventActions",
                "description": "Represents the actions attached to an event."
            },
            "ExecutableCode": {
                "properties": {
                    "code": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Code",
                        "description": "Required. The code to be executed."
                    },
                    "language": {
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/Language"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "description": "Required. Programming language of the `code`."
                    }
                },
                "additionalProperties": false,
                "type": "object",
                "title": "ExecutableCode",
                "description": "Code generated by the model that is meant to be executed, and the result returned to the model.\n\nGenerated when using the [FunctionDeclaration] tool and\n[FunctionCallingConfig] mode is set to [Mode.CODE]."
            },
            "FileData": {
                "properties": {
                    "displayName": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Displayname",
                        "description": "Optional. Display name of the file data. Used to provide a label or filename to distinguish file datas. It is not currently used in the Gemini GenerateContent calls."
                    },
                    "fileUri": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Fileuri",
                        "description": "Required. URI."
                    },
                    "mimeType": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Mimetype",
                        "description": "Required. The IANA standard MIME type of the source data."
                    }
                },
                "additionalProperties": false,
                "type": "object",
                "title": "FileData",
                "description": "URI based data."
            },
            "FunctionCall": {
                "properties": {
                    "id": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Id",
                        "description": "The unique id of the function call. If populated, the client to execute the\n   `function_call` and return the response with the matching `id`."
                    },
                    "args": {
                        "anyOf": [
                            {
                                "additionalProperties": true,
                                "type": "object"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Args",
                        "description": "Optional. The function parameters and values in JSON object format. See [FunctionDeclaration.parameters] for parameter details."
                    },
                    "name": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Name",
                        "description": "Required. The name of the function to call. Matches [FunctionDeclaration.name]."
                    }
                },
                "additionalProperties": false,
                "type": "object",
                "title": "FunctionCall",
                "description": "A function call."
            },
            "FunctionResponse": {
                "properties": {
                    "willContinue": {
                        "anyOf": [
                            {
                                "type": "boolean"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Willcontinue",
                        "description": "Signals that function call continues, and more responses will be returned, turning the function call into a generator. Is only applicable to NON_BLOCKING function calls (see FunctionDeclaration.behavior for details), ignored otherwise. If false, the default, future responses will not be considered. Is only applicable to NON_BLOCKING function calls, is ignored otherwise. If set to false, future responses will not be considered. It is allowed to return empty `response` with `will_continue=False` to signal that the function call is finished."
                    },
                    "scheduling": {
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/FunctionResponseScheduling"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "description": "Specifies how the response should be scheduled in the conversation. Only applicable to NON_BLOCKING function calls, is ignored otherwise. Defaults to WHEN_IDLE."
                    },
                    "id": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Id",
                        "description": "Optional. The id of the function call this response is for. Populated by the client to match the corresponding function call `id`."
                    },
                    "name": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Name",
                        "description": "Required. The name of the function to call. Matches [FunctionDeclaration.name] and [FunctionCall.name]."
                    },
                    "response": {
                        "anyOf": [
                            {
                                "additionalProperties": true,
                                "type": "object"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Response",
                        "description": "Required. The function response in JSON object format. Use \"output\" key to specify function output and \"error\" key to specify error details (if any). If \"output\" and \"error\" keys are not specified, then whole \"response\" is treated as function output."
                    }
                },
                "additionalProperties": false,
                "type": "object",
                "title": "FunctionResponse",
                "description": "A function response."
            },
            "FunctionResponseScheduling": {
                "type": "string",
                "enum": [
                    "SCHEDULING_UNSPECIFIED",
                    "SILENT",
                    "WHEN_IDLE",
                    "INTERRUPT"
                ],
                "title": "FunctionResponseScheduling",
                "description": "Specifies how the response should be scheduled in the conversation."
            },
            "GenerateContentResponseUsageMetadata-Input": {
                "properties": {
                    "cacheTokensDetails": {
                        "anyOf": [
                            {
                                "items": {
                                    "$ref": "#/components/schemas/ModalityTokenCount"
                                },
                                "type": "array"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Cachetokensdetails",
                        "description": "Output only. List of modalities of the cached content in the request input."
                    },
                    "cachedContentTokenCount": {
                        "anyOf": [
                            {
                                "type": "integer"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Cachedcontenttokencount",
                        "description": "Output only. Number of tokens in the cached part in the input (the cached content)."
                    },
                    "candidatesTokenCount": {
                        "anyOf": [
                            {
                                "type": "integer"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Candidatestokencount",
                        "description": "Number of tokens in the response(s)."
                    },
                    "candidatesTokensDetails": {
                        "anyOf": [
                            {
                                "items": {
                                    "$ref": "#/components/schemas/ModalityTokenCount"
                                },
                                "type": "array"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Candidatestokensdetails",
                        "description": "Output only. List of modalities that were returned in the response."
                    },
                    "promptTokenCount": {
                        "anyOf": [
                            {
                                "type": "integer"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Prompttokencount",
                        "description": "Number of tokens in the request. When `cached_content` is set, this is still the total effective prompt size meaning this includes the number of tokens in the cached content."
                    },
                    "promptTokensDetails": {
                        "anyOf": [
                            {
                                "items": {
                                    "$ref": "#/components/schemas/ModalityTokenCount"
                                },
                                "type": "array"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Prompttokensdetails",
                        "description": "Output only. List of modalities that were processed in the request input."
                    },
                    "thoughtsTokenCount": {
                        "anyOf": [
                            {
                                "type": "integer"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Thoughtstokencount",
                        "description": "Output only. Number of tokens present in thoughts output."
                    },
                    "toolUsePromptTokenCount": {
                        "anyOf": [
                            {
                                "type": "integer"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Tooluseprompttokencount",
                        "description": "Output only. Number of tokens present in tool-use prompt(s)."
                    },
                    "toolUsePromptTokensDetails": {
                        "anyOf": [
                            {
                                "items": {
                                    "$ref": "#/components/schemas/ModalityTokenCount"
                                },
                                "type": "array"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Tooluseprompttokensdetails",
                        "description": "Output only. List of modalities that were processed for tool-use request inputs."
                    },
                    "totalTokenCount": {
                        "anyOf": [
                            {
                                "type": "integer"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Totaltokencount",
                        "description": "Total token count for prompt, response candidates, and tool-use prompts (if present)."
                    },
                    "trafficType": {
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/TrafficType"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "description": "Output only. Traffic type. This shows whether a request consumes Pay-As-You-Go or Provisioned Throughput quota."
                    }
                },
                "additionalProperties": false,
                "type": "object",
                "title": "GenerateContentResponseUsageMetadata",
                "description": "Usage metadata about response(s)."
            },
            "GenerateContentResponseUsageMetadata-Output": {
                "properties": {
                    "cacheTokensDetails": {
                        "anyOf": [
                            {
                                "items": {
                                    "$ref": "#/components/schemas/ModalityTokenCount"
                                },
                                "type": "array"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Cachetokensdetails",
                        "description": "Output only. List of modalities of the cached content in the request input."
                    },
                    "cachedContentTokenCount": {
                        "anyOf": [
                            {
                                "type": "integer"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Cachedcontenttokencount",
                        "description": "Output only. Number of tokens in the cached part in the input (the cached content)."
                    },
                    "candidatesTokenCount": {
                        "anyOf": [
                            {
                                "type": "integer"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Candidatestokencount",
                        "description": "Number of tokens in the response(s)."
                    },
                    "candidatesTokensDetails": {
                        "anyOf": [
                            {
                                "items": {
                                    "$ref": "#/components/schemas/ModalityTokenCount"
                                },
                                "type": "array"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Candidatestokensdetails",
                        "description": "Output only. List of modalities that were returned in the response."
                    },
                    "promptTokenCount": {
                        "anyOf": [
                            {
                                "type": "integer"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Prompttokencount",
                        "description": "Number of tokens in the request. When `cached_content` is set, this is still the total effective prompt size meaning this includes the number of tokens in the cached content."
                    },
                    "promptTokensDetails": {
                        "anyOf": [
                            {
                                "items": {
                                    "$ref": "#/components/schemas/ModalityTokenCount"
                                },
                                "type": "array"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Prompttokensdetails",
                        "description": "Output only. List of modalities that were processed in the request input."
                    },
                    "thoughtsTokenCount": {
                        "anyOf": [
                            {
                                "type": "integer"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Thoughtstokencount",
                        "description": "Output only. Number of tokens present in thoughts output."
                    },
                    "toolUsePromptTokenCount": {
                        "anyOf": [
                            {
                                "type": "integer"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Tooluseprompttokencount",
                        "description": "Output only. Number of tokens present in tool-use prompt(s)."
                    },
                    "toolUsePromptTokensDetails": {
                        "anyOf": [
                            {
                                "items": {
                                    "$ref": "#/components/schemas/ModalityTokenCount"
                                },
                                "type": "array"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Tooluseprompttokensdetails",
                        "description": "Output only. List of modalities that were processed for tool-use request inputs."
                    },
                    "totalTokenCount": {
                        "anyOf": [
                            {
                                "type": "integer"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Totaltokencount",
                        "description": "Total token count for prompt, response candidates, and tool-use prompts (if present)."
                    },
                    "trafficType": {
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/TrafficType"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "description": "Output only. Traffic type. This shows whether a request consumes Pay-As-You-Go or Provisioned Throughput quota."
                    }
                },
                "additionalProperties": false,
                "type": "object",
                "title": "GenerateContentResponseUsageMetadata",
                "description": "Usage metadata about response(s)."
            },
            "GroundingChunk-Input": {
                "properties": {
                    "retrievedContext": {
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/GroundingChunkRetrievedContext-Input"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "description": "Grounding chunk from context retrieved by the retrieval tools."
                    },
                    "web": {
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/GroundingChunkWeb"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "description": "Grounding chunk from the web."
                    }
                },
                "additionalProperties": false,
                "type": "object",
                "title": "GroundingChunk",
                "description": "Grounding chunk."
            },
            "GroundingChunk-Output": {
                "properties": {
                    "retrievedContext": {
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/GroundingChunkRetrievedContext-Output"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "description": "Grounding chunk from context retrieved by the retrieval tools."
                    },
                    "web": {
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/GroundingChunkWeb"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "description": "Grounding chunk from the web."
                    }
                },
                "additionalProperties": false,
                "type": "object",
                "title": "GroundingChunk",
                "description": "Grounding chunk."
            },
            "GroundingChunkRetrievedContext-Input": {
                "properties": {
                    "ragChunk": {
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/RagChunk"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "description": "Additional context for the RAG retrieval result. This is only populated when using the RAG retrieval tool."
                    },
                    "text": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Text",
                        "description": "Text of the attribution."
                    },
                    "title": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Title",
                        "description": "Title of the attribution."
                    },
                    "uri": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Uri",
                        "description": "URI reference of the attribution."
                    }
                },
                "additionalProperties": false,
                "type": "object",
                "title": "GroundingChunkRetrievedContext",
                "description": "Chunk from context retrieved by the retrieval tools."
            },
            "GroundingChunkRetrievedContext-Output": {
                "properties": {
                    "ragChunk": {
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/RagChunk"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "description": "Additional context for the RAG retrieval result. This is only populated when using the RAG retrieval tool."
                    },
                    "text": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Text",
                        "description": "Text of the attribution."
                    },
                    "title": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Title",
                        "description": "Title of the attribution."
                    },
                    "uri": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Uri",
                        "description": "URI reference of the attribution."
                    }
                },
                "additionalProperties": false,
                "type": "object",
                "title": "GroundingChunkRetrievedContext",
                "description": "Chunk from context retrieved by the retrieval tools."
            },
            "GroundingChunkWeb": {
                "properties": {
                    "domain": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Domain",
                        "description": "Domain of the (original) URI."
                    },
                    "title": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Title",
                        "description": "Title of the chunk."
                    },
                    "uri": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Uri",
                        "description": "URI reference of the chunk."
                    }
                },
                "additionalProperties": false,
                "type": "object",
                "title": "GroundingChunkWeb",
                "description": "Chunk from the web."
            },
            "GroundingMetadata-Input": {
                "properties": {
                    "groundingChunks": {
                        "anyOf": [
                            {
                                "items": {
                                    "$ref": "#/components/schemas/GroundingChunk-Input"
                                },
                                "type": "array"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Groundingchunks",
                        "description": "List of supporting references retrieved from specified grounding source."
                    },
                    "groundingSupports": {
                        "anyOf": [
                            {
                                "items": {
                                    "$ref": "#/components/schemas/GroundingSupport"
                                },
                                "type": "array"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Groundingsupports",
                        "description": "Optional. List of grounding support."
                    },
                    "retrievalMetadata": {
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/RetrievalMetadata"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "description": "Optional. Output only. Retrieval metadata."
                    },
                    "retrievalQueries": {
                        "anyOf": [
                            {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Retrievalqueries",
                        "description": "Optional. Queries executed by the retrieval tools."
                    },
                    "searchEntryPoint": {
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/SearchEntryPoint"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "description": "Optional. Google search entry for the following-up web searches."
                    },
                    "webSearchQueries": {
                        "anyOf": [
                            {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Websearchqueries",
                        "description": "Optional. Web search queries for the following-up web search."
                    }
                },
                "additionalProperties": false,
                "type": "object",
                "title": "GroundingMetadata",
                "description": "Metadata returned to client when grounding is enabled."
            },
            "GroundingMetadata-Output": {
                "properties": {
                    "groundingChunks": {
                        "anyOf": [
                            {
                                "items": {
                                    "$ref": "#/components/schemas/GroundingChunk-Output"
                                },
                                "type": "array"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Groundingchunks",
                        "description": "List of supporting references retrieved from specified grounding source."
                    },
                    "groundingSupports": {
                        "anyOf": [
                            {
                                "items": {
                                    "$ref": "#/components/schemas/GroundingSupport"
                                },
                                "type": "array"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Groundingsupports",
                        "description": "Optional. List of grounding support."
                    },
                    "retrievalMetadata": {
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/RetrievalMetadata"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "description": "Optional. Output only. Retrieval metadata."
                    },
                    "retrievalQueries": {
                        "anyOf": [
                            {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Retrievalqueries",
                        "description": "Optional. Queries executed by the retrieval tools."
                    },
                    "searchEntryPoint": {
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/SearchEntryPoint"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "description": "Optional. Google search entry for the following-up web searches."
                    },
                    "webSearchQueries": {
                        "anyOf": [
                            {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Websearchqueries",
                        "description": "Optional. Web search queries for the following-up web search."
                    }
                },
                "additionalProperties": false,
                "type": "object",
                "title": "GroundingMetadata",
                "description": "Metadata returned to client when grounding is enabled."
            },
            "GroundingSupport": {
                "properties": {
                    "confidenceScores": {
                        "anyOf": [
                            {
                                "items": {
                                    "type": "number"
                                },
                                "type": "array"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Confidencescores",
                        "description": "Confidence score of the support references. Ranges from 0 to 1. 1 is the most confident. This list must have the same size as the grounding_chunk_indices."
                    },
                    "groundingChunkIndices": {
                        "anyOf": [
                            {
                                "items": {
                                    "type": "integer"
                                },
                                "type": "array"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Groundingchunkindices",
                        "description": "A list of indices (into 'grounding_chunk') specifying the citations associated with the claim. For instance [1,3,4] means that grounding_chunk[1], grounding_chunk[3], grounding_chunk[4] are the retrieved content attributed to the claim."
                    },
                    "segment": {
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/Segment"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "description": "Segment of the content this support belongs to."
                    }
                },
                "additionalProperties": false,
                "type": "object",
                "title": "GroundingSupport",
                "description": "Grounding support."
            },
            "HTTPBase": {
                "properties": {
                    "type": {
                        "$ref": "#/components/schemas/SecuritySchemeType",
                        "default": "http"
                    },
                    "description": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Description"
                    },
                    "scheme": {
                        "type": "string",
                        "title": "Scheme"
                    }
                },
                "additionalProperties": true,
                "type": "object",
                "required": [
                    "scheme"
                ],
                "title": "HTTPBase"
            },
            "HTTPBearer": {
                "properties": {
                    "type": {
                        "$ref": "#/components/schemas/SecuritySchemeType",
                        "default": "http"
                    },
                    "description": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Description"
                    },
                    "scheme": {
                        "type": "string",
                        "const": "bearer",
                        "title": "Scheme",
                        "default": "bearer"
                    },
                    "bearerFormat": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Bearerformat"
                    }
                },
                "additionalProperties": true,
                "type": "object",
                "title": "HTTPBearer"
            },
            "HTTPValidationError": {
                "properties": {
                    "detail": {
                        "items": {
                            "$ref": "#/components/schemas/ValidationError"
                        },
                        "type": "array",
                        "title": "Detail"
                    }
                },
                "type": "object",
                "title": "HTTPValidationError"
            },
            "HttpAuth": {
                "properties": {
                    "scheme": {
                        "type": "string",
                        "title": "Scheme"
                    },
                    "credentials": {
                        "$ref": "#/components/schemas/HttpCredentials"
                    }
                },
                "additionalProperties": true,
                "type": "object",
                "required": [
                    "scheme",
                    "credentials"
                ],
                "title": "HttpAuth",
                "description": "The credentials and metadata for HTTP authentication."
            },
            "HttpCredentials": {
                "properties": {
                    "username": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Username"
                    },
                    "password": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Password"
                    },
                    "token": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Token"
                    }
                },
                "additionalProperties": true,
                "type": "object",
                "title": "HttpCredentials",
                "description": "Represents the secret token value for HTTP authentication, like user name, password, oauth token, etc."
            },
            "IntermediateData-Input": {
                "properties": {
                    "toolUses": {
                        "items": {
                            "$ref": "#/components/schemas/FunctionCall"
                        },
                        "type": "array",
                        "title": "Tooluses",
                        "default": []
                    },
                    "intermediateResponses": {
                        "items": {
                            "prefixItems": [
                                {
                                    "type": "string"
                                },
                                {
                                    "items": {
                                        "$ref": "#/components/schemas/Part-Input"
                                    },
                                    "type": "array"
                                }
                            ],
                            "type": "array",
                            "maxItems": 2,
                            "minItems": 2
                        },
                        "type": "array",
                        "title": "Intermediateresponses",
                        "default": []
                    }
                },
                "type": "object",
                "title": "IntermediateData",
                "description": "Container for intermediate data that an agent would generate as it responds with a final answer."
            },
            "IntermediateData-Output": {
                "properties": {
                    "toolUses": {
                        "items": {
                            "$ref": "#/components/schemas/FunctionCall"
                        },
                        "type": "array",
                        "title": "Tooluses",
                        "default": []
                    },
                    "intermediateResponses": {
                        "items": {
                            "prefixItems": [
                                {
                                    "type": "string"
                                },
                                {
                                    "items": {
                                        "$ref": "#/components/schemas/Part-Output"
                                    },
                                    "type": "array"
                                }
                            ],
                            "type": "array",
                            "maxItems": 2,
                            "minItems": 2
                        },
                        "type": "array",
                        "title": "Intermediateresponses",
                        "default": []
                    }
                },
                "type": "object",
                "title": "IntermediateData",
                "description": "Container for intermediate data that an agent would generate as it responds with a final answer."
            },
            "Invocation-Input": {
                "properties": {
                    "invocationId": {
                        "type": "string",
                        "title": "Invocationid",
                        "default": ""
                    },
                    "userContent": {
                        "$ref": "#/components/schemas/Content-Input"
                    },
                    "finalResponse": {
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/Content-Input"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    },
                    "intermediateData": {
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/IntermediateData-Input"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    },
                    "creationTimestamp": {
                        "type": "number",
                        "title": "Creationtimestamp",
                        "default": 0.0
                    }
                },
                "type": "object",
                "required": [
                    "userContent"
                ],
                "title": "Invocation",
                "description": "Represents a single invocation."
            },
            "Invocation-Output": {
                "properties": {
                    "invocationId": {
                        "type": "string",
                        "title": "Invocationid",
                        "default": ""
                    },
                    "userContent": {
                        "$ref": "#/components/schemas/Content-Output"
                    },
                    "finalResponse": {
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/Content-Output"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    },
                    "intermediateData": {
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/IntermediateData-Output"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    },
                    "creationTimestamp": {
                        "type": "number",
                        "title": "Creationtimestamp",
                        "default": 0.0
                    }
                },
                "type": "object",
                "required": [
                    "userContent"
                ],
                "title": "Invocation",
                "description": "Represents a single invocation."
            },
            "Language": {
                "type": "string",
                "enum": [
                    "LANGUAGE_UNSPECIFIED",
                    "PYTHON"
                ],
                "title": "Language",
                "description": "Required. Programming language of the `code`."
            },
            "MediaModality": {
                "type": "string",
                "enum": [
                    "MODALITY_UNSPECIFIED",
                    "TEXT",
                    "IMAGE",
                    "VIDEO",
                    "AUDIO",
                    "DOCUMENT"
                ],
                "title": "MediaModality",
                "description": "Server content modalities."
            },
            "ModalityTokenCount": {
                "properties": {
                    "modality": {
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/MediaModality"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "description": "The modality associated with this token count."
                    },
                    "tokenCount": {
                        "anyOf": [
                            {
                                "type": "integer"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Tokencount",
                        "description": "Number of tokens."
                    }
                },
                "additionalProperties": false,
                "type": "object",
                "title": "ModalityTokenCount",
                "description": "Represents token counting info for a single modality."
            },
            "OAuth2-Input": {
                "properties": {
                    "type": {
                        "$ref": "#/components/schemas/SecuritySchemeType",
                        "default": "oauth2"
                    },
                    "description": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Description"
                    },
                    "flows": {
                        "$ref": "#/components/schemas/OAuthFlows"
                    }
                },
                "additionalProperties": true,
                "type": "object",
                "required": [
                    "flows"
                ],
                "title": "OAuth2"
            },
            "OAuth2-Output": {
                "properties": {
                    "type": {
                        "$ref": "#/components/schemas/SecuritySchemeType",
                        "default": "oauth2"
                    },
                    "description": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Description"
                    },
                    "flows": {
                        "$ref": "#/components/schemas/OAuthFlows"
                    }
                },
                "additionalProperties": true,
                "type": "object",
                "required": [
                    "flows"
                ],
                "title": "OAuth2"
            },
            "OAuth2Auth": {
                "properties": {
                    "clientId": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Clientid"
                    },
                    "clientSecret": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Clientsecret"
                    },
                    "authUri": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Authuri"
                    },
                    "state": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "State"
                    },
                    "redirectUri": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Redirecturi"
                    },
                    "authResponseUri": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Authresponseuri"
                    },
                    "authCode": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Authcode"
                    },
                    "accessToken": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Accesstoken"
                    },
                    "refreshToken": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Refreshtoken"
                    },
                    "expiresAt": {
                        "anyOf": [
                            {
                                "type": "integer"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Expiresat"
                    },
                    "expiresIn": {
                        "anyOf": [
                            {
                                "type": "integer"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Expiresin"
                    }
                },
                "additionalProperties": true,
                "type": "object",
                "title": "OAuth2Auth",
                "description": "Represents credential value and its metadata for a OAuth2 credential."
            },
            "OAuthFlowAuthorizationCode": {
                "properties": {
                    "refreshUrl": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Refreshurl"
                    },
                    "scopes": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "type": "object",
                        "title": "Scopes",
                        "default": {}
                    },
                    "authorizationUrl": {
                        "type": "string",
                        "title": "Authorizationurl"
                    },
                    "tokenUrl": {
                        "type": "string",
                        "title": "Tokenurl"
                    }
                },
                "additionalProperties": true,
                "type": "object",
                "required": [
                    "authorizationUrl",
                    "tokenUrl"
                ],
                "title": "OAuthFlowAuthorizationCode"
            },
            "OAuthFlowClientCredentials": {
                "properties": {
                    "refreshUrl": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Refreshurl"
                    },
                    "scopes": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "type": "object",
                        "title": "Scopes",
                        "default": {}
                    },
                    "tokenUrl": {
                        "type": "string",
                        "title": "Tokenurl"
                    }
                },
                "additionalProperties": true,
                "type": "object",
                "required": [
                    "tokenUrl"
                ],
                "title": "OAuthFlowClientCredentials"
            },
            "OAuthFlowImplicit": {
                "properties": {
                    "refreshUrl": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Refreshurl"
                    },
                    "scopes": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "type": "object",
                        "title": "Scopes",
                        "default": {}
                    },
                    "authorizationUrl": {
                        "type": "string",
                        "title": "Authorizationurl"
                    }
                },
                "additionalProperties": true,
                "type": "object",
                "required": [
                    "authorizationUrl"
                ],
                "title": "OAuthFlowImplicit"
            },
            "OAuthFlowPassword": {
                "properties": {
                    "refreshUrl": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Refreshurl"
                    },
                    "scopes": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "type": "object",
                        "title": "Scopes",
                        "default": {}
                    },
                    "tokenUrl": {
                        "type": "string",
                        "title": "Tokenurl"
                    }
                },
                "additionalProperties": true,
                "type": "object",
                "required": [
                    "tokenUrl"
                ],
                "title": "OAuthFlowPassword"
            },
            "OAuthFlows": {
                "properties": {
                    "implicit": {
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/OAuthFlowImplicit"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    },
                    "password": {
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/OAuthFlowPassword"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    },
                    "clientCredentials": {
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/OAuthFlowClientCredentials"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    },
                    "authorizationCode": {
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/OAuthFlowAuthorizationCode"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    }
                },
                "additionalProperties": true,
                "type": "object",
                "title": "OAuthFlows"
            },
            "OpenIdConnect": {
                "properties": {
                    "type": {
                        "$ref": "#/components/schemas/SecuritySchemeType",
                        "default": "openIdConnect"
                    },
                    "description": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Description"
                    },
                    "openIdConnectUrl": {
                        "type": "string",
                        "title": "Openidconnecturl"
                    }
                },
                "additionalProperties": true,
                "type": "object",
                "required": [
                    "openIdConnectUrl"
                ],
                "title": "OpenIdConnect"
            },
            "OpenIdConnectWithConfig": {
                "properties": {
                    "type": {
                        "$ref": "#/components/schemas/SecuritySchemeType",
                        "default": "openIdConnect"
                    },
                    "description": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Description"
                    },
                    "authorization_endpoint": {
                        "type": "string",
                        "title": "Authorization Endpoint"
                    },
                    "token_endpoint": {
                        "type": "string",
                        "title": "Token Endpoint"
                    },
                    "userinfo_endpoint": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Userinfo Endpoint"
                    },
                    "revocation_endpoint": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Revocation Endpoint"
                    },
                    "token_endpoint_auth_methods_supported": {
                        "anyOf": [
                            {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Token Endpoint Auth Methods Supported"
                    },
                    "grant_types_supported": {
                        "anyOf": [
                            {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Grant Types Supported"
                    },
                    "scopes": {
                        "anyOf": [
                            {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Scopes"
                    }
                },
                "additionalProperties": true,
                "type": "object",
                "required": [
                    "authorization_endpoint",
                    "token_endpoint"
                ],
                "title": "OpenIdConnectWithConfig"
            },
            "Outcome": {
                "type": "string",
                "enum": [
                    "OUTCOME_UNSPECIFIED",
                    "OUTCOME_OK",
                    "OUTCOME_FAILED",
                    "OUTCOME_DEADLINE_EXCEEDED"
                ],
                "title": "Outcome",
                "description": "Required. Outcome of the code execution."
            },
            "Part-Input": {
                "properties": {
                    "videoMetadata": {
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/VideoMetadata"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "description": "Metadata for a given video."
                    },
                    "thought": {
                        "anyOf": [
                            {
                                "type": "boolean"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Thought",
                        "description": "Indicates if the part is thought from the model."
                    },
                    "inlineData": {
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/Blob"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "description": "Optional. Inlined bytes data."
                    },
                    "fileData": {
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/FileData"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "description": "Optional. URI based data."
                    },
                    "thoughtSignature": {
                        "anyOf": [
                            {
                                "type": "string",
                                "format": "base64url"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Thoughtsignature",
                        "description": "An opaque signature for the thought so it can be reused in subsequent requests."
                    },
                    "codeExecutionResult": {
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/CodeExecutionResult"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "description": "Optional. Result of executing the [ExecutableCode]."
                    },
                    "executableCode": {
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/ExecutableCode"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "description": "Optional. Code generated by the model that is meant to be executed."
                    },
                    "functionCall": {
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/FunctionCall"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "description": "Optional. A predicted [FunctionCall] returned from the model that contains a string representing the [FunctionDeclaration.name] with the parameters and their values."
                    },
                    "functionResponse": {
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/FunctionResponse"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "description": "Optional. The result output of a [FunctionCall] that contains a string representing the [FunctionDeclaration.name] and a structured JSON object containing any output from the function call. It is used as context to the model."
                    },
                    "text": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Text",
                        "description": "Optional. Text part (can be code)."
                    }
                },
                "additionalProperties": false,
                "type": "object",
                "title": "Part",
                "description": "A datatype containing media content.\n\nExactly one field within a Part should be set, representing the specific type\nof content being conveyed. Using multiple fields within the same `Part`\ninstance is considered invalid."
            },
            "Part-Output": {
                "properties": {
                    "videoMetadata": {
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/VideoMetadata"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "description": "Metadata for a given video."
                    },
                    "thought": {
                        "anyOf": [
                            {
                                "type": "boolean"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Thought",
                        "description": "Indicates if the part is thought from the model."
                    },
                    "inlineData": {
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/Blob"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "description": "Optional. Inlined bytes data."
                    },
                    "fileData": {
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/FileData"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "description": "Optional. URI based data."
                    },
                    "thoughtSignature": {
                        "anyOf": [
                            {
                                "type": "string",
                                "format": "base64url"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Thoughtsignature",
                        "description": "An opaque signature for the thought so it can be reused in subsequent requests."
                    },
                    "codeExecutionResult": {
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/CodeExecutionResult"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "description": "Optional. Result of executing the [ExecutableCode]."
                    },
                    "executableCode": {
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/ExecutableCode"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "description": "Optional. Code generated by the model that is meant to be executed."
                    },
                    "functionCall": {
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/FunctionCall"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "description": "Optional. A predicted [FunctionCall] returned from the model that contains a string representing the [FunctionDeclaration.name] with the parameters and their values."
                    },
                    "functionResponse": {
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/FunctionResponse"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "description": "Optional. The result output of a [FunctionCall] that contains a string representing the [FunctionDeclaration.name] and a structured JSON object containing any output from the function call. It is used as context to the model."
                    },
                    "text": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Text",
                        "description": "Optional. Text part (can be code)."
                    }
                },
                "additionalProperties": false,
                "type": "object",
                "title": "Part",
                "description": "A datatype containing media content.\n\nExactly one field within a Part should be set, representing the specific type\nof content being conveyed. Using multiple fields within the same `Part`\ninstance is considered invalid."
            },
            "RagChunk": {
                "properties": {
                    "pageSpan": {
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/RagChunkPageSpan"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "description": "If populated, represents where the chunk starts and ends in the document."
                    },
                    "text": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Text",
                        "description": "The content of the chunk."
                    }
                },
                "additionalProperties": false,
                "type": "object",
                "title": "RagChunk",
                "description": "A RagChunk includes the content of a chunk of a RagFile, and associated metadata."
            },
            "RagChunkPageSpan": {
                "properties": {
                    "firstPage": {
                        "anyOf": [
                            {
                                "type": "integer"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Firstpage",
                        "description": "Page where chunk starts in the document. Inclusive. 1-indexed."
                    },
                    "lastPage": {
                        "anyOf": [
                            {
                                "type": "integer"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Lastpage",
                        "description": "Page where chunk ends in the document. Inclusive. 1-indexed."
                    }
                },
                "additionalProperties": false,
                "type": "object",
                "title": "RagChunkPageSpan",
                "description": "Represents where the chunk starts and ends in the document."
            },
            "RetrievalMetadata": {
                "properties": {
                    "googleSearchDynamicRetrievalScore": {
                        "anyOf": [
                            {
                                "type": "number"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Googlesearchdynamicretrievalscore",
                        "description": "Optional. Score indicating how likely information from Google Search could help answer the prompt. The score is in the range `[0, 1]`, where 0 is the least likely and 1 is the most likely. This score is only populated when Google Search grounding and dynamic retrieval is enabled. It will be compared to the threshold to determine whether to trigger Google Search."
                    }
                },
                "additionalProperties": false,
                "type": "object",
                "title": "RetrievalMetadata",
                "description": "Metadata related to retrieval in the grounding flow."
            },
            "RunEvalRequest": {
                "properties": {
                    "evalIds": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array",
                        "title": "Evalids"
                    },
                    "evalMetrics": {
                        "items": {
                            "$ref": "#/components/schemas/EvalMetric"
                        },
                        "type": "array",
                        "title": "Evalmetrics"
                    }
                },
                "type": "object",
                "required": [
                    "evalIds",
                    "evalMetrics"
                ],
                "title": "RunEvalRequest"
            },
            "RunEvalResult": {
                "properties": {
                    "evalSetFile": {
                        "type": "string",
                        "title": "Evalsetfile"
                    },
                    "evalSetId": {
                        "type": "string",
                        "title": "Evalsetid"
                    },
                    "evalId": {
                        "type": "string",
                        "title": "Evalid"
                    },
                    "finalEvalStatus": {
                        "$ref": "#/components/schemas/EvalStatus"
                    },
                    "evalMetricResults": {
                        "items": {
                            "prefixItems": [
                                {
                                    "$ref": "#/components/schemas/EvalMetric"
                                },
                                {
                                    "$ref": "#/components/schemas/EvalMetricResult"
                                }
                            ],
                            "type": "array",
                            "maxItems": 2,
                            "minItems": 2
                        },
                        "type": "array",
                        "title": "Evalmetricresults",
                        "description": "This field is deprecated, use overall_eval_metric_results instead.",
                        "deprecated": true
                    },
                    "overallEvalMetricResults": {
                        "items": {
                            "$ref": "#/components/schemas/EvalMetricResult"
                        },
                        "type": "array",
                        "title": "Overallevalmetricresults"
                    },
                    "evalMetricResultPerInvocation": {
                        "items": {
                            "$ref": "#/components/schemas/EvalMetricResultPerInvocation"
                        },
                        "type": "array",
                        "title": "Evalmetricresultperinvocation"
                    },
                    "userId": {
                        "type": "string",
                        "title": "Userid"
                    },
                    "sessionId": {
                        "type": "string",
                        "title": "Sessionid"
                    }
                },
                "type": "object",
                "required": [
                    "evalSetFile",
                    "evalSetId",
                    "evalId",
                    "finalEvalStatus",
                    "evalMetricResults",
                    "overallEvalMetricResults",
                    "evalMetricResultPerInvocation",
                    "userId",
                    "sessionId"
                ],
                "title": "RunEvalResult"
            },
            "SearchEntryPoint": {
                "properties": {
                    "renderedContent": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Renderedcontent",
                        "description": "Optional. Web content snippet that can be embedded in a web page or an app webview."
                    },
                    "sdkBlob": {
                        "anyOf": [
                            {
                                "type": "string",
                                "format": "base64url"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Sdkblob",
                        "description": "Optional. Base64 encoded JSON representing array of tuple."
                    }
                },
                "additionalProperties": false,
                "type": "object",
                "title": "SearchEntryPoint",
                "description": "Google search entry point."
            },
            "SecuritySchemeType": {
                "type": "string",
                "enum": [
                    "apiKey",
                    "http",
                    "oauth2",
                    "openIdConnect"
                ],
                "title": "SecuritySchemeType"
            },
            "Segment": {
                "properties": {
                    "endIndex": {
                        "anyOf": [
                            {
                                "type": "integer"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Endindex",
                        "description": "Output only. End index in the given Part, measured in bytes. Offset from the start of the Part, exclusive, starting at zero."
                    },
                    "partIndex": {
                        "anyOf": [
                            {
                                "type": "integer"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Partindex",
                        "description": "Output only. The index of a Part object within its parent Content object."
                    },
                    "startIndex": {
                        "anyOf": [
                            {
                                "type": "integer"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Startindex",
                        "description": "Output only. Start index in the given Part, measured in bytes. Offset from the start of the Part, inclusive, starting at zero."
                    },
                    "text": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Text",
                        "description": "Output only. The text corresponding to the segment from the response."
                    }
                },
                "additionalProperties": false,
                "type": "object",
                "title": "Segment",
                "description": "Segment of the content."
            },
            "ServiceAccount": {
                "properties": {
                    "serviceAccountCredential": {
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/ServiceAccountCredential"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    },
                    "scopes": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array",
                        "title": "Scopes"
                    },
                    "useDefaultCredential": {
                        "anyOf": [
                            {
                                "type": "boolean"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Usedefaultcredential",
                        "default": false
                    }
                },
                "additionalProperties": true,
                "type": "object",
                "required": [
                    "scopes"
                ],
                "title": "ServiceAccount",
                "description": "Represents Google Service Account configuration."
            },
            "ServiceAccountCredential": {
                "properties": {
                    "type": {
                        "type": "string",
                        "title": "Type",
                        "default": ""
                    },
                    "projectId": {
                        "type": "string",
                        "title": "Projectid"
                    },
                    "privateKeyId": {
                        "type": "string",
                        "title": "Privatekeyid"
                    },
                    "privateKey": {
                        "type": "string",
                        "title": "Privatekey"
                    },
                    "clientEmail": {
                        "type": "string",
                        "title": "Clientemail"
                    },
                    "clientId": {
                        "type": "string",
                        "title": "Clientid"
                    },
                    "authUri": {
                        "type": "string",
                        "title": "Authuri"
                    },
                    "tokenUri": {
                        "type": "string",
                        "title": "Tokenuri"
                    },
                    "authProviderX509CertUrl": {
                        "type": "string",
                        "title": "Authproviderx509Certurl"
                    },
                    "clientX509CertUrl": {
                        "type": "string",
                        "title": "Clientx509Certurl"
                    },
                    "universeDomain": {
                        "type": "string",
                        "title": "Universedomain"
                    }
                },
                "additionalProperties": true,
                "type": "object",
                "required": [
                    "projectId",
                    "privateKeyId",
                    "privateKey",
                    "clientEmail",
                    "clientId",
                    "authUri",
                    "tokenUri",
                    "authProviderX509CertUrl",
                    "clientX509CertUrl",
                    "universeDomain"
                ],
                "title": "ServiceAccountCredential",
                "description": "Represents Google Service Account configuration.\n\nAttributes:\n  type: The type should be \"service_account\".\n  project_id: The project ID.\n  private_key_id: The ID of the private key.\n  private_key: The private key.\n  client_email: The client email.\n  client_id: The client ID.\n  auth_uri: The authorization URI.\n  token_uri: The token URI.\n  auth_provider_x509_cert_url: URL for auth provider's X.509 cert.\n  client_x509_cert_url: URL for the client's X.509 cert.\n  universe_domain: The universe domain.\n\nExample:\n\n    config = ServiceAccountCredential(\n        type_=\"service_account\",\n        project_id=\"your_project_id\",\n        private_key_id=\"your_private_key_id\",\n        private_key=\"-----BEGIN PRIVATE KEY-----...\",\n        client_email=\"...@....iam.gserviceaccount.com\",\n        client_id=\"your_client_id\",\n        auth_uri=\"https://accounts.google.com/o/oauth2/auth\",\n        token_uri=\"https://oauth2.googleapis.com/token\",\n        auth_provider_x509_cert_url=\"https://www.googleapis.com/oauth2/v1/certs\",\n        client_x509_cert_url=\"https://www.googleapis.com/robot/v1/metadata/x509/...\",\n        universe_domain=\"googleapis.com\"\n    )\n\n\n    config = ServiceAccountConfig.model_construct(**{\n        ...service account config dict\n    })"
            },
            "Session": {
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "Id"
                    },
                    "appName": {
                        "type": "string",
                        "title": "Appname"
                    },
                    "userId": {
                        "type": "string",
                        "title": "Userid"
                    },
                    "state": {
                        "additionalProperties": true,
                        "type": "object",
                        "title": "State"
                    },
                    "events": {
                        "items": {
                            "$ref": "#/components/schemas/Event-Output"
                        },
                        "type": "array",
                        "title": "Events"
                    },
                    "lastUpdateTime": {
                        "type": "number",
                        "title": "Lastupdatetime",
                        "default": 0.0
                    }
                },
                "additionalProperties": false,
                "type": "object",
                "required": [
                    "id",
                    "appName",
                    "userId"
                ],
                "title": "Session",
                "description": "Represents a series of interactions between a user and agents.\n\nAttributes:\n  id: The unique identifier of the session.\n  app_name: The name of the app.\n  user_id: The id of the user.\n  state: The state of the session.\n  events: The events of the session, e.g. user input, model response, function\n    call/response, etc.\n  last_update_time: The last update time of the session."
            },
            "SessionInput": {
                "properties": {
                    "appName": {
                        "type": "string",
                        "title": "Appname"
                    },
                    "userId": {
                        "type": "string",
                        "title": "Userid"
                    },
                    "state": {
                        "additionalProperties": true,
                        "type": "object",
                        "title": "State"
                    }
                },
                "type": "object",
                "required": [
                    "appName",
                    "userId"
                ],
                "title": "SessionInput",
                "description": "Values that help initialize a Session."
            },
            "TrafficType": {
                "type": "string",
                "enum": [
                    "TRAFFIC_TYPE_UNSPECIFIED",
                    "ON_DEMAND",
                    "PROVISIONED_THROUGHPUT"
                ],
                "title": "TrafficType",
                "description": "Output only.\n\nTraffic type. This shows whether a request consumes Pay-As-You-Go or\nProvisioned Throughput quota."
            },
            "ValidationError": {
                "properties": {
                    "loc": {
                        "items": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "integer"
                                }
                            ]
                        },
                        "type": "array",
                        "title": "Location"
                    },
                    "msg": {
                        "type": "string",
                        "title": "Message"
                    },
                    "type": {
                        "type": "string",
                        "title": "Error Type"
                    }
                },
                "type": "object",
                "required": [
                    "loc",
                    "msg",
                    "type"
                ],
                "title": "ValidationError"
            },
            "VideoMetadata": {
                "properties": {
                    "fps": {
                        "anyOf": [
                            {
                                "type": "number"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Fps",
                        "description": "The frame rate of the video sent to the model. If not specified, the\n        default value will be 1.0. The fps range is (0.0, 24.0]."
                    },
                    "endOffset": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Endoffset",
                        "description": "Optional. The end offset of the video."
                    },
                    "startOffset": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Startoffset",
                        "description": "Optional. The start offset of the video."
                    }
                },
                "additionalProperties": false,
                "type": "object",
                "title": "VideoMetadata",
                "description": "Describes how the video in the Part should be used by the model."
            }
        }
    }
}